// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "Tourism/internal/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// CheckEmailUnique mocks base method.
func (m *MockAuthRepository) CheckEmailUnique(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmailUnique", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckEmailUnique indicates an expected call of CheckEmailUnique.
func (mr *MockAuthRepositoryMockRecorder) CheckEmailUnique(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailUnique", reflect.TypeOf((*MockAuthRepository)(nil).CheckEmailUnique), ctx, email)
}

// CheckPhoneUnique mocks base method.
func (m *MockAuthRepository) CheckPhoneUnique(ctx context.Context, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPhoneUnique", ctx, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPhoneUnique indicates an expected call of CheckPhoneUnique.
func (mr *MockAuthRepositoryMockRecorder) CheckPhoneUnique(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPhoneUnique", reflect.TypeOf((*MockAuthRepository)(nil).CheckPhoneUnique), ctx, phone)
}

// CreateUser mocks base method.
func (m *MockAuthRepository) CreateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepository)(nil).CreateUser), ctx, user)
}

// GetAuthContextByUserID mocks base method.
func (m *MockAuthRepository) GetAuthContextByUserID(ctx context.Context, id int64) (*domain.AuthContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthContextByUserID", ctx, id)
	ret0, _ := ret[0].(*domain.AuthContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthContextByUserID indicates an expected call of GetAuthContextByUserID.
func (mr *MockAuthRepositoryMockRecorder) GetAuthContextByUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthContextByUserID", reflect.TypeOf((*MockAuthRepository)(nil).GetAuthContextByUserID), ctx, id)
}

// GetUserByPhone mocks base method.
func (m *MockAuthRepository) GetUserByPhone(ctx context.Context, phone string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", ctx, phone)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone.
func (mr *MockAuthRepositoryMockRecorder) GetUserByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockAuthRepository)(nil).GetUserByPhone), ctx, phone)
}
